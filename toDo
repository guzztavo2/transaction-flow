[x] Setup do projeto:
    Instalar as depêndencias que serão utilizadas.
    Utilizar o Docker e o Docker-compose para o funcionamento do Laravel e do banco de dados MySQL;
    Criar as migrations e as models iniciais.
    Configurar as depêndencias necessarias, como JWToken. 
    

1. Estrutura de Rotas da API

Autenticação e Usuários
    [x] - Register - [x] tested and worked (used phpunit);
    [x] - Login - [x] tested and worked (used phpunit);
    [x] - ChangePassword;
    [x] - ResetPassword;
    [x] - Me;
    [x] - Logout;
    [x] - Refresh;


Contas e Saldo

    POST /api/accounts
    Descrição: Criação de uma nova conta bancária.Funcionamento: Gera um número único para a conta, associa ao usuário e inicializa o saldo.

    GET /api/accounts/{id}
    Descrição: Retorna informações e o saldo atual de uma conta.Funcionamento: Consulta os dados da conta e pode utilizar cache para melhorar a performance.

Processamento de Transações

    POST /api/transfer
    Descrição: Realiza uma transferência entre contas.Funcionamento: Recebe dados (conta de origem, destino, valor); dentro de uma transação de banco de dados, verifica o saldo, cria o registro na tabela de transações e atualiza os saldos.

    POST /api/transfer/schedule
    Descrição: Agenda uma transferência para uma data futura.Funcionamento: Salva a transferência com status “agendada” e dispara um job (via Laravel Queues) na data prevista para processá-la.

Logs e Auditoria

    GET /api/transactions
    Descrição: Lista as transações realizadas, com filtros por data, status, etc.Funcionamento: Consulta a tabela de transações e, possivelmente, utiliza cache para requisições frequentes.

    GET /api/audit
    Descrição: Retorna logs detalhados das operações, úteis para auditoria e troubleshooting.

Notificações e Webhooks

    POST /api/notifications/test (exemplo interno para disparar notificações)
    Descrição: Permite testar o envio de notificações via e-mail ou SMS.Funcionamento: Utiliza a trait Notifiable e o sistema de notificações do Laravel.

    Webhook endpointsPor exemplo: POST /api/webhooks/receive
    Descrição: Recebe dados de terceiros e integra com o sistema.

2. Funcionamento Interno do Sistema

Autenticação Segura

    JWT/OAuth2:Utilizar pacotes como tymon/jwt-auth ou Laravel Passport para implementar a geração e validação de tokens.

    Middleware:Criar um middleware que verifica a presença e validade do token em cada requisição protegida.

Contas e Saldo com Controle de Concorrência

    Criação e Atualização de Contas:Cada conta tem um identificador único e um campo saldo. Ao realizar transferências, você pode utilizar transações de banco de dados (DB::transaction) e, se necessário, bloqueios (p.ex. SELECT ... FOR UPDATE) para garantir que dois processos não alterem o saldo simultaneamente.

    Rotas e Endpoints:Rotas que criam e consultam contas, e atualizam o saldo de forma atômica.

Processamento de Transações e Rollback

    Transferências:Quando uma transferência é realizada, você deve envolver toda a operação em uma transação de banco de dados:

    DB::transaction(function () use ($fromAccount, $toAccount, $value) {
        if ($fromAccount->saldo < $value) {
            throw new Exception("Saldo insuficiente");
        }
        $fromAccount->decrement('saldo', $value);
        $toAccount->increment('saldo', $value);
        Transaction::create([
            'conta_origem' => $fromAccount->id,
            'conta_destino' => $toAccount->id,
            'valor' => $value,
            'status' => 'concluído'
        ]);
    });

    Rollback automático:Se qualquer exceção for lançada dentro do bloco DB::transaction, todas as operações realizadas até o momento serão revertidas, garantindo que o sistema não fique com dados inconsistentes.

    Agendamento:Transferências agendadas são salvas com status "agendada" e, quando o job é executado, a operação é realizada dentro de um bloco transacional. Se algo falhar, o sistema faz o rollback e atualiza o status da transferência para "falhou", podendo disparar notificações de erro.

Logs e Auditoria

    Registro de Operações:Toda transação pode ser registrada em uma tabela de logs ou auditoria, onde cada operação (inclusão, alteração, falha) é gravada com informações do usuário, timestamp e detalhes da operação.

    Rollback:Em caso de falhas durante o processamento, o uso de transações no banco de dados faz com que o rollback seja automático, garantindo a integridade dos dados.

Notificações e Webhooks

    Notificações:Utilizando o sistema de notificações do Laravel (trait Notifiable), o sistema pode enviar e-mails, SMS ou mensagens via Slack para informar os usuários sobre o status das transações.

    Webhooks:Endpoints dedicados para receber ou enviar dados a sistemas de terceiros. Por exemplo, quando uma transferência é concluída, um webhook pode notificar um sistema parceiro para atualizar seus registros.

Testes Automatizados

    PHPUnit e Pest:Escrever testes unitários para funções críticas, como a lógica de transferência, e testes de integração para validar o comportamento da API (rotas, autenticação, processamento assíncrono, etc.).

    Simulação de Cenários:Testar casos de sucesso e falha para garantir que o rollback funcione corretamente quando o saldo é insuficiente ou quando há erros de processamento.

Desempenho e Segurança

    Cache para Otimizar Consultas:Para operações que fazem consultas frequentes (por exemplo, consulta de saldo, listagem de transações), você pode usar o cache do Laravel (como Redis ou Memcached) para armazenar resultados por um curto período.Exemplo:

        $balance = Cache::remember("account_balance_{$account->id}", 60, function() use ($account) {
            return $account->saldo;
        });

    //Isso reduz a carga no banco de dados e melhora a performance.

    Proteção Contra Ataques:Implementar medidas como validação e sanitização dos dados, uso de prepared statements (o Eloquent já faz isso), proteção contra CSRF (middleware padrão do Laravel), e outras boas práticas de segurança.

3. Funcionamento Geral do Sistema com Rollback

    Imagine o fluxo de uma transferência:

    Requisição na Rota:O usuário envia uma requisição para POST /api/transfer com os IDs das contas e o valor.

    Validação e Autorização:Um middleware valida o token JWT e checa permissões.

    Processamento da Transferência:O controller recebe os dados e inicia uma transação de banco de dados (DB::transaction).

    Verificação de Saldo:O sistema verifica se a conta de origem tem saldo suficiente.

    Atualização de Saldos e Criação de Registro:Se tudo estiver correto, atualiza o saldo das contas e cria um registro na tabela transactions.

    Rollback Automático:Se ocorrer qualquer erro (por exemplo, saldo insuficiente, falha na criação do registro, ou problema de comunicação), a exceção lança o rollback, revertendo todas as alterações feitas na transação.

    Notificação e Logs:O sistema registra a operação e envia notificações (se configurado) sobre o sucesso ou falha da transação.